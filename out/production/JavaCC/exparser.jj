PARSER_BEGIN(Example)


/** Simple brace matcher. */
public class Example {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    Example parser = new Example(System.in);
    parser.FormaGeral();
  }

}


PARSER_END(Example)

SKIP : {
    " " |
    "\t" |
    "\n" |
    "\r"
}

TOKEN : {
    <WRITE: "write"> |
    <READ: "read"> |
    <THIS: "this"> |
    <DO: "do"> |
    <BODY: "body"> |
    <DESCRIPTION: "description"> |
    <DECLARATION: "declaration"> |
    <DESIGNATE: "designate"> |
    <AVALIATE: "avaliate"> |
    <REPEAT: "repeat"> |
    <CONSTANT: "constant"> |
    <VARIABLE: "variable"> |
    <AND: "and"> |
    <AS: "as"> |
    <EQ: "="> |
    <TYPE: "type"> |
    <IS: "is"> |
    <OCBRACKETS: "{"> |
    <CCBRACKETS: "}"> |
    <OBRACKETS: "["> |
    <CBRACKETS: "]"> |
    <OPARENTHESES: "("> |
    <CPARENTHESES: ")"> |
    <TRUE: "true"> |
    <UNTRUE: "untrue"> |
    <FALSE: "false"> |
    <RESULT: "result"> |
    <SLASH: "/"> |
    <DOT: "."> |
    <COMMA: ","> |
    <ALL_TYPES: "integer" | "real" |  "string" |  "logic" |  "real"> |
    // TODO: Atualizar os possiveis valores
    <VALUE: "1" | "2">
}

TOKEN : {
    <NUM: (["0"-"9"])> |
    <ID: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])*>
}


// Forma geral de um programa
void FormaGeral():
{}
{
    <DO> <THIS> <ID> <OBRACKETS> <CBRACKETS> Enumerado() <BODY> <OBRACKETS> Comandos() <CBRACKETS> <DESCRIPTION>
}

// Forma geral de um enumerado
void Enumerado():
{}
{
    <DECLARATION> <TYPE> <OBRACKETS> <ID> <IS> <OCBRACKETS>ListaIdentificadores() <CCBRACKETS> <DOT> <CBRACKETS>
}

// Forma geral da declaracao de constantes e variaveis
void VariavelEConstante():
{}
{
    <DECLARATION> <CONSTANT> <AND> <VARIABLE> <OBRACKETS>  Constantes() Variaveis() <CBRACKETS>
}

// Forma geral do comando de atribuicao
void Atribuicao():
{}
{
    <DESIGNATE> <THIS> ListaIdentificadoresVariavel() <AS> Expressao()
}

// Forma geral do comando de entrada de dados
void EntradaDados() :
{}
{
   <READ>
   <THIS> <OBRACKETS> ListaIdentificadores()<CBRACKETS> <DOT>
}

// Forma geral do comando de saida de dados
void SaidaDados() :
{}
{
    <WRITE>
    <THIS> <OBRACKETS> ListaIdentificadores() <CBRACKETS> <DOT>
}

// Forma geral do comando de selecao
void Selecao():
{}
{
    <AVALIATE> <THIS> Expressao()
        <TRUE> <RESULT> <OBRACKETS> Comandos() <CBRACKETS>
        <UNTRUE> <RESULT> <OBRACKETS> Comandos() <CBRACKETS>
}

// Forma geral do comando de repeticao
void Repeticao():
{}
{
    <REPEAT> <THIS> Expressao() <OBRACKETS> Comandos() <CBRACKETS>
}

// Formas gerais auxiliares
void Comandos():
{}
{
    (SaidaDados()  | EntradaDados() | Enumerado()) *
}


void Constantes():
{}
{
    <AS> <CONSTANT> (ListaIdentificadores() <IS> <ALL_TYPES> <EQ> <VALUE> <DOT>)*
}

void Variaveis():
{}
{
    <AS> <VARIABLE> (ListaIdentificadoresVariavel() <IS> <ALL_TYPES> <DOT>)*
}


void Expressao():
{}
{
    // TODO: Atualizar aqui, por enquanto so aceita numeros
    (<NUM>)*
}

void ComentarioLinha():
{}
{
    <SLASH><SLASH> (<ID>)*
}

void ListaIdentificadores() :
{}
{
    <ID> (<COMMA> <ID>)*
}

// Lista de identificadores para variavel pois devem possuir a constante numerica unitaria
// Exemplo: identificador{1}
void ListaIdentificadoresVariavel():
{}
{
    (<ID> <OCBRACKETS> <NUM> <CCBRACKETS>) (<COMMA>  (<ID> <OCBRACKETS> <NUM> <CCBRACKETS>)) *
}
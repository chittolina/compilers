options {
    LOOKAHEAD = 2;
    IGNORE_CASE = true;
}

PARSER_BEGIN(Example)

import java.io.FileReader;
import java.io.FileNotFoundException;

public class Example {

  /** Main entry point. */
  public static void main(String args[]) throws ParseException {
    if (args.length > 0) {
        try {
            FileReader fileReader = new FileReader(args[0]);
            Example parser = new Example(fileReader);
            parser.FormaGeral();
        } catch (FileNotFoundException e) {
        }
    } else {
        Example parser = new Example(System.in);
        parser.FormaGeral();
    }
  }
}


PARSER_END(Example)

SKIP : {
    " " |
    "\t" |
    "\n" |
    "\r"
}

SKIP : {
  < "//" (~["\n","\r"])* ("\n"|"\r")> |
  "/*" : IN_BLOCK_COMMENT
}

<IN_BLOCK_COMMENT> MORE : {
  "*/" { SwitchTo(DEFAULT); } |
  < ~[] >
}

TOKEN : {
    <WRITE: "write"> |
    <READ: "read"> |
    <THIS: "this"> |
    <DO: "do"> |
    <BODY: "body"> |
    <DESCRIPTION: "description"> |
    <DECLARATION: "declaration"> |
    <DESIGNATE: "designate"> |
    <AVALIATE: "avaliate"> |
    <REPEAT: "repeat"> |
    <CONSTANT: "constant"> |
    <VARIABLE: "variable"> |
    <AND: "and"> |
    <AS: "as"> |
    <OPLUS: "+" > |
    <OMINUS: "-" > |
    <OMULTIPLY: "*" > |
    <OPOWER: "**" > |
    <ODIV: "%" > |
    <OMOD: "%%" > |
    <OEQ: "="> |
    <ODEQ: "=="> |
    <ONEQ: "!=" > |
    <OLT: "<<" > |
    <OGT: ">>" > |
    <OLTE: "<<=" > |
    <OGTE: ">>=" > |
    <OAND: "&" > |
    <OOR: "|" > |
    <ONOT: "!" > |
    <TYPE: "type"> |
    <IS: "is"> |
    <OCBRACKETS: "{"> |
    <CCBRACKETS: "}"> |
    <OBRACKETS: "["> |
    <CBRACKETS: "]"> |
    <OPARENTHESES: "("> |
    <CPARENTHESES: ")"> |
    <TRUE: "true"> |
    <UNTRUE: "untrue"> |
    <FALSE: "false"> |
    <RESULT: "result"> |
    <SLASH: "/"> |
    <DOT: "."> |
    <COMMA: ","> |
    <ALL: "all"> |
    <ALL_TYPES: "integer" | "real" |  "string" |  "logic">
}


TOKEN : {
    <NUM: (["0"-"9"])> |
    <ID: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9"])*> |
    <INT: (["0"-"9"])+ > |
    <REAL: (["0"-"9"])+ "." (["0"-"9"])* > |
    <STRING: "\"" ( ~["\""] )* "\"" > |
    <LOGIC: "true" | "false" >
}

// Forma geral de um programa
void FormaGeral():
{Token t;}
{
   t = <DO> <THIS> <ID> <OBRACKETS> <CBRACKETS> Enumerado() [VariavelEConstante()] <BODY> <OBRACKETS> Comandos() <CBRACKETS> ((<DESCRIPTION>)(<ID>)*)? <EOF>
   { mostrarTokens(t); }
}

// Forma geral de um enumerado
void Enumerado():
{}
{
   <DECLARATION> <TYPE> <OBRACKETS> <ID> <IS> <OCBRACKETS>ListaIdentificadores() <CCBRACKETS> <DOT> <CBRACKETS>
}

// Forma geral da declaracao de constantes e variaveis
void VariavelEConstante():
{}
{
    <DECLARATION> <CONSTANT> <AND> <VARIABLE> <OBRACKETS> ((Constantes() Variaveis() ) | (Variaveis() Constantes())) <CBRACKETS>
}

// Forma geral do comando de atribuicao
void Atribuicao():
{}
{
    <DESIGNATE> <THIS> ListaIdentificadores() <AS> Expressao()
}

// Forma geral do comando de entrada de dados
void EntradaDados() :
{}
{
   <READ>
   <THIS> <OBRACKETS> ListaIdentificadores()<CBRACKETS> <DOT>
}

// Forma geral do comando de saida de dados
void SaidaDados() :
{}
{
    <WRITE> <ALL>
    <THIS> <OBRACKETS> ListaIdentificadores() <CBRACKETS> <DOT>
}

// Forma geral do comando de selecao
void Selecao():
{}
{
    <AVALIATE> <THIS> Expressao()
        <TRUE> <RESULT> <OBRACKETS> Comandos() <CBRACKETS>
        <UNTRUE> <RESULT> <OBRACKETS> Comandos() <CBRACKETS> <DOT>
}

// Forma geral do comando de repeticao
void Repeticao():
{}
{
    <REPEAT> <THIS> Expressao() <OBRACKETS> Comandos() <CBRACKETS> <DOT>
}

// Formas gerais auxiliares
void Comandos():
{}
{
    (SaidaDados()  | EntradaDados() | Repeticao() | Selecao() | Atribuicao())*
}


void Constantes():
{}
{
    <AS> <CONSTANT> (ListaIdentificadores() <IS> <ALL_TYPES> <OEQ> (<NUM>)* <DOT>)*
}

void Variaveis():
{}
{
    <AS> <VARIABLE> (ListaIdentificadoresVariavel() <IS> <ALL_TYPES> <DOT>)*
}


void ComentarioLinha():
{}
{
    <SLASH><SLASH> (<ID>)*
}

void ListaIdentificadores() :
{}
{
    <ID> (<COMMA> <ID>)*
}

// Lista de identificadores para variavel pois devem possuir a constante numerica unitaria
// Exemplo: identificador{1}
void ListaIdentificadoresVariavel():
{}
{
    (<ID> <OCBRACKETS> <NUM> <CCBRACKETS>) (<COMMA>  (<ID> <OCBRACKETS> <NUM> <CCBRACKETS>)) *
}


//

void Expressao() : { }
{
  ExpressaoRelacional() ( ( <OAND> | <OOR> ) ExpressaoRelacional() )*
}

void ExpressaoRelacional() : { }
{
  ExpressaoAritimetica() ( ( <OEQ> | <ONEQ> | <OLT> | <OGT> | <OLTE> | <OGTE> ) ExpressaoAritimetica() )?
}

void ExpressaoAritimetica() : { }
{
  Termos() ( ( <OPLUS> | <OMINUS> ) Termos() )*
}

void Termos() : { }
{
  Fator() ( ( <OMULTIPLY> | <SLASH> | <ODIV> | <OMOD> ) Fator() )*
}

void Fator() : { }
{
  <ID> | <INT> |<NUM>| <REAL> | <STRING> | <LOGIC> | <ONOT> Fator() | <OPARENTHESES> Expressao() <CPARENTHESES>
}

JAVACODE
void mostrarTokens(Token t)
{
    while(t.next != null) {
            System.out.println((String.format("Linhas: %d - %d", t.beginLine, t.endLine)));
            System.out.println((String.format("Colunas: %d - %d", t.beginColumn, t.endColumn)));
            System.out.println("Lexema: " + t.image);
            System.out.println("Categoria: " + t.kind);
            System.out.println("-----------");
            t = t.next;
    }
}